#[import(cc = "device", name = "llvm.nvvm.read.ptx.sreg.ctaid.x")] fn nvvm_read_ptx_sreg_ctaid_x() -> i32;
#[import(cc = "device", name = "llvm.nvvm.read.ptx.sreg.ctaid.y")] fn nvvm_read_ptx_sreg_ctaid_y() -> i32;
#[import(cc = "device", name = "llvm.nvvm.read.ptx.sreg.ctaid.z")] fn nvvm_read_ptx_sreg_ctaid_z() -> i32;
#[import(cc = "device", name = "llvm.nvvm.read.ptx.sreg.nctaid.x")] fn nvvm_read_ptx_sreg_nctaid_x() -> i32;
#[import(cc = "device", name = "llvm.nvvm.read.ptx.sreg.nctaid.y")] fn nvvm_read_ptx_sreg_nctaid_y() -> i32;
#[import(cc = "device", name = "llvm.nvvm.read.ptx.sreg.nctaid.z")] fn nvvm_read_ptx_sreg_nctaid_z() -> i32;
#[import(cc = "device", name = "llvm.nvvm.read.ptx.sreg.ntid.x")] fn nvvm_read_ptx_sreg_ntid_x() -> i32;
#[import(cc = "device", name = "llvm.nvvm.read.ptx.sreg.ntid.y")] fn nvvm_read_ptx_sreg_ntid_y() -> i32;
#[import(cc = "device", name = "llvm.nvvm.read.ptx.sreg.ntid.z")] fn nvvm_read_ptx_sreg_ntid_z() -> i32;
#[import(cc = "device", name = "llvm.nvvm.read.ptx.sreg.tid.x")] fn nvvm_read_ptx_sreg_tid_x() -> i32;
#[import(cc = "device", name = "llvm.nvvm.read.ptx.sreg.tid.y")] fn nvvm_read_ptx_sreg_tid_y() -> i32;
#[import(cc = "device", name = "llvm.nvvm.read.ptx.sreg.tid.z")] fn nvvm_read_ptx_sreg_tid_z() -> i32;
#[import(cc = "device", name = "llvm.nvvm.barrier0")] fn nvvm_barrier() -> ();

fn @runtime_device(platform: i32, device: i32) -> i32 = platform | (device << 4);
fn @alloc_gpu(dev: i32, size: i64) -> &[f32] = runtime_alloc(runtime_device(1, dev), size) as &[f32];
fn @release_gpu(dev: i32, data: &[f32]) = runtime_release(runtime_device(1, dev), data as &[i8]);
fn @runtime_copy_to_gpu(dev: i32, src: &[f32], dst: &[f32], size: i64) = runtime_copy(0, src as &[i8], 0, runtime_device(1, dev), dst as &mut[i8], 0, size);
fn @runtime_copy_to_cpu(dev: i32, src: &[f32], dst: &[f32], size: i64) = runtime_copy(runtime_device(1, dev), src as &[i8], 0, 0, dst as &mut[i8], 0, size);
fn @synchronize_cuda(dev: i32) = runtime_synchronize(runtime_device(1, dev));

fn @acc(body: fn() -> ()) = @|dev: i32, grid: (i32, i32, i32), block: (i32, i32, i32)| nvvm(dev, grid, block, body);
fn @acc_sync(dev: i32)  = synchronize_cuda(dev);
fn @acc_tidx() -> i32   = nvvm_read_ptx_sreg_tid_x();
fn @acc_tidy() -> i32   = nvvm_read_ptx_sreg_tid_y();
fn @acc_tidz() -> i32   = nvvm_read_ptx_sreg_tid_z();
fn @acc_bidx() -> i32   = nvvm_read_ptx_sreg_ctaid_x();
fn @acc_bidy() -> i32   = nvvm_read_ptx_sreg_ctaid_y();
fn @acc_bidz() -> i32   = nvvm_read_ptx_sreg_ctaid_z();
fn @acc_bdimx() -> i32  = nvvm_read_ptx_sreg_ntid_x();
fn @acc_bdimy() -> i32  = nvvm_read_ptx_sreg_ntid_y();
fn @acc_bdimz() -> i32  = nvvm_read_ptx_sreg_ntid_z();
fn @acc_gdimx() -> i32  = nvvm_read_ptx_sreg_nctaid_x();
fn @acc_gdimy() -> i32  = nvvm_read_ptx_sreg_nctaid_y();
fn @acc_gdimz() -> i32  = nvvm_read_ptx_sreg_nctaid_z();
fn @acc_gidx() -> i32   = acc_tidx() + acc_bdimx() * acc_bidx();
fn @acc_gidy() -> i32   = acc_tidy() + acc_bdimy() * acc_bidy();
fn @acc_gidz() -> i32   = acc_tidz() + acc_bdimz() * acc_bidz();
fn @acc_barrier() -> () = nvvm_barrier();
fn @acc_dev() -> i32    = 0;
